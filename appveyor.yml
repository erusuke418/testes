# As config was originally based on an example by Olivier Grisel. Thanks!
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml

clone_depth: 50

branches:
  except:
    - /pyup\/.*/

# No reason for us to restrict the number concurrent jobs
max_jobs: 100

environment:
  global:
    # Wrapper to ensure extensions are build using the MSVC compiler matching
    # the target Python version and architecture.
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: 'cmd /E:ON /V:ON /C .\tests\scripts\appveyor\run_with_env.cmd'

  PYTEST: py.test --maxfail 5 --durations=10 --junitxml=junit-results.xml
  # Break the tests into two runs, since together they exceed the 1 hour limit.
  # See https://github.com/pyinstaller/pyinstaller/issues/2024#issuecomment-224129520
  # for more discussion.
  TESTS_UNITTESTS: tests/unit tests/functional --ignore=tests/functional/test_libraries.py --ignore=tests/functional/test_hooks
  TESTS_LIBRARIES: tests/functional/test_libraries.py tests/functional/test_hooks
  APPVEYOR_SAVE_CACHE_ON_ERROR: true

  matrix:
    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64
      TEST_LIBRARIES: NO

    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64
      TEST_LIBRARIES: YES

    - PYTHON: C:\Python36
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 32
      TEST_LIBRARIES: NO

    - PYTHON: C:\Python36
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 32
      TEST_LIBRARIES: YES

    - PYTHON: C:\Python35
      PYTHON_VERSION: 3.5
      PYTHON_ARCH: 32
      TEST_LIBRARIES: NO

    - PYTHON: C:\Python35
      PYTHON_VERSION: 3.5
      PYTHON_ARCH: 32
      TEST_LIBRARIES: YES

    - PYTHON: C:\Python34
      PYTHON_VERSION: 3.4
      PYTHON_ARCH: 32
      TEST_LIBRARIES: NO

    - PYTHON: C:\Python34
      PYTHON_VERSION: 3.4
      PYTHON_ARCH: 32
      TEST_LIBRARIES: YES

    - PYTHON: C:\Python33
      PYTHON_VERSION: 3.3
      PYTHON_ARCH: 32
      TEST_LIBRARIES: NO

    - PYTHON: C:\Python33
      PYTHON_VERSION: 3.3
      PYTHON_ARCH: 32
      TEST_LIBRARIES: YES

    - PYTHON: C:\Python27
      PYTHON_VERSION: 2.7
      PYTHON_ARCH: 32
      TEST_LIBRARIES: NO

    - PYTHON: C:\Python27
      PYTHON_VERSION: 2.7
      PYTHON_ARCH: 32
      TEST_LIBRARIES: YES


init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

cache:
  # Cache downloaded pip packages and built wheels.
  - '%LOCALAPPDATA%\pip\Cache\http'
  - '%LOCALAPPDATA%\pip\Cache\wheels'

install:
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     %CMD_IN_ENV%
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Compile bootloader.
  - cd bootloader
  - python waf all --target-arch=%PYTHON_ARCH%bit
  # Verify the bootloaders have the expected arch
  - python ../tests/scripts/check-pefile-arch.py %PYTHON_ARCH% build/*/*.exe
  - cd ..

  ### Install the PyInstaller dependencies.
  # If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages, pip
  # will build them from source using the MSVC compiler matching the target
  # Python version and architecture. To achieve this, all commands are run
  # under control of '%CMD_IN_ENV%' (see above).

  # Upgrade to the latest pip.
  - '%CMD_IN_ENV% python -m pip install -U pip setuptools wheel'

  # Install the PyInstaller test dependencies.
  - '%CMD_IN_ENV% pip install -U --timeout 5 --retries 2
        -r tests/requirements-tools.txt'
  - 'if "%TEST_LIBRARIES%" == "YES" (
        %CMD_IN_ENV% pip install -U --timeout 5 --retries 2
             -r tests/requirements-libraries.txt
    )'
  # Install PyInstaller into virtualenv.
  - '%CMD_IN_ENV% pip install -e .'

build: none

test_script:
  # Run the tests appropriate for this entry in the test matrix. Skip tests
  # if we're just updating the cache.
  - 'if not "%APPVEYOR_SCHEDULED_BUILD%" == "True" (
        if /i "%TEST_LIBRARIES%" == "YES" (
          %CMD_IN_ENV% %PYTEST% %TESTS_LIBRARIES%
        ) else (
          %CMD_IN_ENV% %PYTEST% %TESTS_UNITTESTS%
    ))'

on_finish:
  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete
  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"
  - ps: |
      (new-object net.webclient).UploadFile(
        "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
        (Resolve-Path .\junit-results.xml)
      )
      $LastExitCode = 0
